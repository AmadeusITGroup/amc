name: Windows

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  mingw:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x64, x86]

    steps:
      - uses: actions/checkout@v2
      - name: Set up MinGW
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: ${{ matrix.architecture }}
      - name: cmake
        run: cmake -S . -B build -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_CROSSCOMPILING=1 -DRUN_HAVE_STD_REGEX=0
      - name: build
        run: cmake --build build
      - name: test
        run: cd build && ctest --output-on-failure

  msvc2017:
    runs-on: windows-2016
    strategy:
      matrix:
        build_type: [Debug, Release]
        architecture: [Win32, x64]

    steps:
    - uses: actions/checkout@v2
    - name: cmake
      run: cmake -S . -B build -G "Visual Studio 15 2017" -A ${{ matrix.architecture }}
      if: matrix.build_type == 'Release' && matrix.architecture == 'x64'
    - name: cmake
      run: cmake -S . -B build -G "Visual Studio 15 2017" -A ${{ matrix.architecture }}
      if: matrix.build_type == 'Release' && matrix.architecture != 'x64'
    - name: cmake
      run: cmake -S . -B build -G "Visual Studio 15 2017" -A ${{ matrix.architecture }}
      if: matrix.build_type == 'Debug'
    - name: build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel 10
    - name: test
      run: cd build && ctest -C ${{ matrix.build_type }} --output-on-failure

  msvc2019:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
        architecture: [Win32, x64]

    steps:
    - uses: actions/checkout@v2
    - name: cmake
      run: cmake -S . -B build -G "Visual Studio 16 2019" -A ${{ matrix.architecture }}
      if: matrix.build_type == 'Release'
    - name: cmake
      run: cmake -S . -B build -G "Visual Studio 16 2019" -A ${{ matrix.architecture }}
      if: matrix.build_type == 'Debug'
    - name: build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel 10
    - name: test
      run: cd build && ctest -C ${{ matrix.build_type }} --output-on-failure

  msvc2019_latest:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: cmake
      run: cmake -S . -B build -G "Visual Studio 16 2019" -DCMAKE_CXX_FLAGS="/permissive- /std:c++latest /utf-8 /W4"
    - name: build
      run: cmake --build build --config Release --parallel 10
    - name: test
      run: cd build && ctest -C Release --output-on-failure

  clang-cl-11:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [Win32, x64]

    steps:
      - uses: actions/checkout@v2
      - name: cmake
        run: cmake -S . -B build -G "Visual Studio 16 2019" -A ${{ matrix.architecture }} -T ClangCL
      - name: build
        run: cmake --build build --config Debug --parallel 10
      - name: test
        run: cd build && ctest -C Debug --output-on-failure